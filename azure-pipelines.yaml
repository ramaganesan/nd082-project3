name: Azure Pipelines
trigger:
- master
variables:
  python.version: '3.7.6'
  TF_VAR_ARM_SUBSCRIPTION_ID: $(subscription_id)
  TF_VAR_ARM_CLIENT_ID: $(client_id)
  TF_VAR_ARM_CLIENT_SECRET: $(client_secret)
  TF_VAR_ARM_TENANT_ID: $(tenant_id)
  TF_VAR_ADMIN_USERANME: $(admin_username)
  TF_VAR_ADMIN_PASSWORD: $(admin_password)
  TF_VAR_PUBLIC_KEY: $(public_key)
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      displayName: 'Install SSH Key'
      inputs:
        knownHostsEntry: '104.211.25.197'
        sshPublicKey: '$(public_key)'
        sshKeySecureFile: 'nd082_project3_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    
    #- task: TerraformInstaller@0
     # displayName: "Terraform Install version 0.12.3"
     # inputs:
     #   terraformVersion: '0.12.3'
    
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'nd082-project3-terraform'
        backendAzureRmResourceGroupName: 'nd082-tstate_rg'
        backendAzureRmStorageAccountName: 'nd082tfstorage10556'
        backendAzureRmContainerName: 'nd082tfcontainer'
        backendAzureRmKey: '$(TF_VAR_STORAGE_ACCESS_KEY)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: TerraformTaskV1@0
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'nd082-project3-terraform'
        backendAzureRmResourceGroupName: 'nd082-tstate_rg'
        backendAzureRmStorageAccountName: 'nd082tfstorage10556'
        backendAzureRmContainerName: 'nd082tfcontainer'
        backendAzureRmKey: '$(TF_VAR_STORAGE_ACCESS_KEY)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: |
          -input=false -var "subscription_id=$(TF_VAR_ARM_SUBSCRIPTION_ID)" -var "client_id=$(TF_VAR_ARM_CLIENT_ID)" -var "client_secret=$(TF_VAR_ARM_CLIENT_SECRET)" -var "tenant_id=$(TF_VAR_ARM_TENANT_ID)" -var "admin_username=$(TF_VAR_ADMIN_USERANME)" -var "admin_password=$(TF_VAR_ADMIN_PASSWORD)" -var "public_key=$(TF_VAR_PUBLIC_KEY)"

    - task: CmdLine@2
      displayName: Install NewMan
      continueOnError: false
      inputs:
        script: 'npm install newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)/postman'

    - task: CmdLine@2
      displayName: "Running PostMan Test"
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json --reporters cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/postman/results/junitReport_$(Build.BuildId).xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/postman'
    - task: PublishTestResults@2
      displayName: "Publishing Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/postman/results/junitReport_*.xml'
        failTaskOnFailedTests: false


- stage: Deploy
  jobs:
  - job: Deploy
    pool: Hosted Ubuntu 1604
    steps:
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-input=false -var "subscription_id=$(TF_VAR_ARM_SUBSCRIPTION_ID)" -var "client_id=$(TF_VAR_ARM_CLIENT_ID)" -var "client_secret=$(TF_VAR_ARM_CLIENT_SECRET)" -var "tenant_id=$(TF_VAR_ARM_TENANT_ID)" -var "admin_username=$(TF_VAR_ADMIN_USERANME)" -var "admin_password=$(TF_VAR_ADMIN_PASSWORD)" -var "public_key=$(TF_VAR_PUBLIC_KEY)"'
        backendServiceArm: 'nd082-project3-terraform'
        backendAzureRmResourceGroupName: 'nd082-tstate_rg'
        backendAzureRmStorageAccountName: 'nd082tfstorage10556'
        backendAzureRmContainerName: 'nd082tfcontainer'
        backendAzureRmKey: '$(TF_VAR_STORAGE_ACCESS_KEY)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-input=false -var "subscription_id=$(TF_VAR_ARM_SUBSCRIPTION_ID)" -var "client_id=$(TF_VAR_ARM_CLIENT_ID)" -var "client_secret=$(TF_VAR_ARM_CLIENT_SECRET)" -var "tenant_id=$(TF_VAR_ARM_TENANT_ID)" -var "admin_username=$(TF_VAR_ADMIN_USERANME)" -var "admin_password=$(TF_VAR_ADMIN_PASSWORD)" -var "public_key=$(TF_VAR_PUBLIC_KEY)"'''
        environmentServiceNameAzureRM: 'nd082-project3-terraform'

        
     


